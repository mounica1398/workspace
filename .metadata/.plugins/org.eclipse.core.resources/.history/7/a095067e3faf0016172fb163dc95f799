package ds;

public class BST {
	public Tnode root;
	BST()
	{
		root = null;
	}
	public Tnode  insert(Tnode root, int v)
	{
		if(root == null)
			root = new Tnode(v);
		if( v < root.data)
			root.left = insert(root.left,v);
		else if(v > root.data)
			root.right = insert(root.right,v);
		return root;
		
	}
	public void inorder(Tnode root)
	{
		if(root == null)
			return;
		inorder(root.left);
		System.out.print(root.data + " ");
		inorder(root.right);
	}
	public void preorder(Tnode root)
	{
		if(root == null)
			return;
		System.out.print(root.data + " ");
		preorder(root.left);
		preorder(root.right);
	}
	public void postorder(Tnode root)
	{
		if(root == null)
			return ;
		postorder(root.left);
		postorder(root.right);
		System.out.print(root.data + " ");
	}
	/*public void Search(Tnode root , int val)
	{
		if(val == root.data)
			System.out.println("key found");
		else if( val < root.data)
		{	
			if(root.left == null)
				System.out.println("key not found");
			else
				Search(root.left,val);
		}
		else if( val > root.data)
		{
			if(root.right == null)
				System.out.println("key not found");
			else
				Search(root.right,val);

		}*/
		public Tnode Search(Tnode root, int val)
		{
			if( root == null || root.data == val)
				return root;
			else if(val < root.data)
				return Search(root.left,val);
			else if(val > root.data)
				return Search(root.right,val);
			else 
				return root;
			
		}
		
	
	
	
	
}
